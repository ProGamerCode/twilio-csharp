/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// SubscribedTrackResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;

namespace Twilio.Rest.Video.V1.Room.Participant 
{

    public class SubscribedTrackResource : Resource 
    {
        public sealed class KindEnum : StringEnum 
        {
            private KindEnum(string value) : base(value) {}
            public KindEnum() {}
            public static implicit operator KindEnum(string value)
            {
                return new KindEnum(value);
            }

            public static readonly KindEnum Audio = new KindEnum("audio");
            public static readonly KindEnum Video = new KindEnum("video");
            public static readonly KindEnum Data = new KindEnum("data");
        }

        public sealed class StatusEnum : StringEnum 
        {
            private StatusEnum(string value) : base(value) {}
            public StatusEnum() {}
            public static implicit operator StatusEnum(string value)
            {
                return new StatusEnum(value);
            }

            public static readonly StatusEnum Subscribe = new StatusEnum("subscribe");
            public static readonly StatusEnum Unsubscribe = new StatusEnum("unsubscribe");
        }

        private static Request BuildReadRequest(ReadSubscribedTrackOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Video,
                "/v1/Rooms/" + options.PathRoomSid + "/Participants/" + options.PathSubscriberSid + "/SubscribedTracks",
                client.Region,
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// read
        /// </summary>
        /// <param name="options"> Read SubscribedTrack parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of SubscribedTrack </returns> 
        public static ResourceSet<SubscribedTrackResource> Read(ReadSubscribedTrackOptions options, 
                                                                ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));

            var page = Page<SubscribedTrackResource>.FromJson("subscribed_tracks", response.Content);
            return new ResourceSet<SubscribedTrackResource>(page, options, client);
        }

        #if !NET35
        /// <summary>
        /// read
        /// </summary>
        /// <param name="options"> Read SubscribedTrack parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of SubscribedTrack </returns> 
        public static async System.Threading.Tasks.Task<ResourceSet<SubscribedTrackResource>> ReadAsync(ReadSubscribedTrackOptions options, 
                                                                                                        ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<SubscribedTrackResource>.FromJson("subscribed_tracks", response.Content);
            return new ResourceSet<SubscribedTrackResource>(page, options, client);
        }
        #endif

        /// <summary>
        /// read
        /// </summary>
        /// <param name="pathRoomSid"> The room_sid </param>
        /// <param name="pathSubscriberSid"> The subscriber_sid </param>
        /// <param name="dateCreatedAfter"> The date_created_after </param>
        /// <param name="dateCreatedBefore"> The date_created_before </param>
        /// <param name="track"> The track </param>
        /// <param name="publisher"> The publisher </param>
        /// <param name="kind"> The kind </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of SubscribedTrack </returns> 
        public static ResourceSet<SubscribedTrackResource> Read(string pathRoomSid, 
                                                                string pathSubscriberSid, 
                                                                DateTime? dateCreatedAfter = null, 
                                                                DateTime? dateCreatedBefore = null, 
                                                                string track = null, 
                                                                string publisher = null, 
                                                                SubscribedTrackResource.KindEnum kind = null, 
                                                                int? pageSize = null, 
                                                                long? limit = null, 
                                                                ITwilioRestClient client = null)
        {
            var options = new ReadSubscribedTrackOptions(pathRoomSid, pathSubscriberSid){DateCreatedAfter = dateCreatedAfter, DateCreatedBefore = dateCreatedBefore, Track = track, Publisher = publisher, Kind = kind, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary>
        /// read
        /// </summary>
        /// <param name="pathRoomSid"> The room_sid </param>
        /// <param name="pathSubscriberSid"> The subscriber_sid </param>
        /// <param name="dateCreatedAfter"> The date_created_after </param>
        /// <param name="dateCreatedBefore"> The date_created_before </param>
        /// <param name="track"> The track </param>
        /// <param name="publisher"> The publisher </param>
        /// <param name="kind"> The kind </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of SubscribedTrack </returns> 
        public static async System.Threading.Tasks.Task<ResourceSet<SubscribedTrackResource>> ReadAsync(string pathRoomSid, 
                                                                                                        string pathSubscriberSid, 
                                                                                                        DateTime? dateCreatedAfter = null, 
                                                                                                        DateTime? dateCreatedBefore = null, 
                                                                                                        string track = null, 
                                                                                                        string publisher = null, 
                                                                                                        SubscribedTrackResource.KindEnum kind = null, 
                                                                                                        int? pageSize = null, 
                                                                                                        long? limit = null, 
                                                                                                        ITwilioRestClient client = null)
        {
            var options = new ReadSubscribedTrackOptions(pathRoomSid, pathSubscriberSid){DateCreatedAfter = dateCreatedAfter, DateCreatedBefore = dateCreatedBefore, Track = track, Publisher = publisher, Kind = kind, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        /// <summary>
        /// Fetch the target page of records
        /// </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns> 
        public static Page<SubscribedTrackResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<SubscribedTrackResource>.FromJson("subscribed_tracks", response.Content);
        }

        /// <summary>
        /// Fetch the next page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns> 
        public static Page<SubscribedTrackResource> NextPage(Page<SubscribedTrackResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(
                    Rest.Domain.Video,
                    client.Region
                )
            );

            var response = client.Request(request);
            return Page<SubscribedTrackResource>.FromJson("subscribed_tracks", response.Content);
        }

        /// <summary>
        /// Fetch the previous page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns> 
        public static Page<SubscribedTrackResource> PreviousPage(Page<SubscribedTrackResource> page, 
                                                                 ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(
                    Rest.Domain.Video,
                    client.Region
                )
            );

            var response = client.Request(request);
            return Page<SubscribedTrackResource>.FromJson("subscribed_tracks", response.Content);
        }

        private static Request BuildUpdateRequest(UpdateSubscribedTrackOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Video,
                "/v1/Rooms/" + options.PathRoomSid + "/Participants/" + options.PathSubscriberSid + "/SubscribedTracks",
                client.Region,
                postParams: options.GetParams()
            );
        }

        /// <summary>
        /// update
        /// </summary>
        /// <param name="options"> Update SubscribedTrack parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of SubscribedTrack </returns> 
        public static SubscribedTrackResource Update(UpdateSubscribedTrackOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// update
        /// </summary>
        /// <param name="options"> Update SubscribedTrack parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of SubscribedTrack </returns> 
        public static async System.Threading.Tasks.Task<SubscribedTrackResource> UpdateAsync(UpdateSubscribedTrackOptions options, 
                                                                                             ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// update
        /// </summary>
        /// <param name="pathRoomSid"> The room_sid </param>
        /// <param name="pathSubscriberSid"> The subscriber_sid </param>
        /// <param name="track"> The track </param>
        /// <param name="publisher"> The publisher </param>
        /// <param name="kind"> The kind </param>
        /// <param name="status"> The status </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of SubscribedTrack </returns> 
        public static SubscribedTrackResource Update(string pathRoomSid, 
                                                     string pathSubscriberSid, 
                                                     string track = null, 
                                                     string publisher = null, 
                                                     SubscribedTrackResource.KindEnum kind = null, 
                                                     SubscribedTrackResource.StatusEnum status = null, 
                                                     ITwilioRestClient client = null)
        {
            var options = new UpdateSubscribedTrackOptions(pathRoomSid, pathSubscriberSid){Track = track, Publisher = publisher, Kind = kind, Status = status};
            return Update(options, client);
        }

        #if !NET35
        /// <summary>
        /// update
        /// </summary>
        /// <param name="pathRoomSid"> The room_sid </param>
        /// <param name="pathSubscriberSid"> The subscriber_sid </param>
        /// <param name="track"> The track </param>
        /// <param name="publisher"> The publisher </param>
        /// <param name="kind"> The kind </param>
        /// <param name="status"> The status </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of SubscribedTrack </returns> 
        public static async System.Threading.Tasks.Task<SubscribedTrackResource> UpdateAsync(string pathRoomSid, 
                                                                                             string pathSubscriberSid, 
                                                                                             string track = null, 
                                                                                             string publisher = null, 
                                                                                             SubscribedTrackResource.KindEnum kind = null, 
                                                                                             SubscribedTrackResource.StatusEnum status = null, 
                                                                                             ITwilioRestClient client = null)
        {
            var options = new UpdateSubscribedTrackOptions(pathRoomSid, pathSubscriberSid){Track = track, Publisher = publisher, Kind = kind, Status = status};
            return await UpdateAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a SubscribedTrackResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> SubscribedTrackResource object represented by the provided JSON </returns> 
        public static SubscribedTrackResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<SubscribedTrackResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// The sid
        /// </summary>
        [JsonProperty("sid")]
        public string Sid { get; private set; }
        /// <summary>
        /// The room_sid
        /// </summary>
        [JsonProperty("room_sid")]
        public string RoomSid { get; private set; }
        /// <summary>
        /// The name
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; private set; }
        /// <summary>
        /// The publisher_sid
        /// </summary>
        [JsonProperty("publisher_sid")]
        public string PublisherSid { get; private set; }
        /// <summary>
        /// The subscriber_sid
        /// </summary>
        [JsonProperty("subscriber_sid")]
        public string SubscriberSid { get; private set; }
        /// <summary>
        /// The date_created
        /// </summary>
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }
        /// <summary>
        /// The date_updated
        /// </summary>
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }
        /// <summary>
        /// The enabled
        /// </summary>
        [JsonProperty("enabled")]
        public bool? Enabled { get; private set; }
        /// <summary>
        /// The kind
        /// </summary>
        [JsonProperty("kind")]
        [JsonConverter(typeof(StringEnumConverter))]
        public SubscribedTrackResource.KindEnum Kind { get; private set; }

        private SubscribedTrackResource()
        {

        }
    }

}